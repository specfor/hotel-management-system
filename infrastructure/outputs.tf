# outputs.tf

# VPC outputs
output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.main.id
}

output "private_subnets" {
  description = "List of IDs of private subnets"
  value       = aws_subnet.private[*].id
}

output "public_subnets" {
  description = "List of IDs of public subnets"
  value       = aws_subnet.public[*].id
}

# EKS outputs
output "cluster_id" {
  description = "EKS cluster ID"
  value       = aws_eks_cluster.main.id
}

output "cluster_arn" {
  description = "EKS cluster ARN"
  value       = aws_eks_cluster.main.arn
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = aws_eks_cluster.main.endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = aws_eks_cluster.main.vpc_config[0].cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/templates/kubeconfig.tpl", {
    cluster_name     = aws_eks_cluster.main.name
    endpoint         = aws_eks_cluster.main.endpoint
    region           = data.aws_region.current.name
    certificate_data = aws_eks_cluster.main.certificate_authority[0].data
  })
  sensitive = true
}

# ECR outputs
output "ecr_repository_url" {
  description = "URL of the ECR repository"
  value       = aws_ecr_repository.backend.repository_url
}

# Database outputs
output "database_host" {
  description = "Database host (internal cluster DNS)"
  value       = "postgres-service.${kubernetes_namespace.database.metadata[0].name}.svc.cluster.local"
}

output "database_port" {
  description = "Database port"
  value       = "5432"
}

output "database_name" {
  description = "Database name"
  value       = var.db_name
}

output "database_username" {
  description = "Database username"
  value       = var.db_username
}

output "database_password" {
  description = "Database password"
  value       = random_password.db_password.result
  sensitive   = true
}

# Frontend outputs
output "s3_bucket_name" {
  description = "Name of the S3 bucket for frontend"
  value       = aws_s3_bucket.frontend.bucket
}

output "s3_bucket_arn" {
  description = "ARN of the S3 bucket for frontend"
  value       = aws_s3_bucket.frontend.arn
}

output "cloudfront_distribution_id" {
  description = "ID of the CloudFront distribution"
  value       = aws_cloudfront_distribution.frontend.id
}

output "cloudfront_distribution_domain_name" {
  description = "Domain name corresponding to the distribution"
  value       = aws_cloudfront_distribution.frontend.domain_name
}

output "frontend_url" {
  description = "Frontend URL"
  value       = var.domain_name != "" ? "https://${var.domain_name}" : "https://${aws_cloudfront_distribution.frontend.domain_name}"
}

# API outputs
output "api_endpoint" {
  description = "API endpoint URL"
  value       = "https://${aws_cloudfront_distribution.frontend.domain_name}/api"
}

# Route53 outputs (if domain is provided)
output "route53_zone_id" {
  description = "Route53 zone ID"
  value       = var.domain_name != "" ? aws_route53_zone.main[0].zone_id : null
}

output "route53_name_servers" {
  description = "Route53 name servers"
  value       = var.domain_name != "" ? aws_route53_zone.main[0].name_servers : null
}

# Useful commands
output "useful_commands" {
  description = "Useful commands for managing the infrastructure"
  value = {
    configure_kubectl = "aws eks update-kubeconfig --region ${data.aws_region.current.name} --name ${aws_eks_cluster.main.name}"
    
    docker_login = "aws ecr get-login-password --region ${data.aws_region.current.name} | docker login --username AWS --password-stdin ${aws_ecr_repository.backend.repository_url}"
    
    build_and_push_backend = join(" && ", [
      "cd backend",
      "docker build -t ${aws_ecr_repository.backend.repository_url}:latest .",
      "docker push ${aws_ecr_repository.backend.repository_url}:latest"
    ])
    
    sync_frontend = "aws s3 sync frontend/dist/ s3://${aws_s3_bucket.frontend.bucket}/ --delete"
    
    invalidate_cloudfront = "aws cloudfront create-invalidation --distribution-id ${aws_cloudfront_distribution.frontend.id} --paths '/*'"
    
    get_database_password = "terraform output -raw database_password"
    
    port_forward_database = "kubectl port-forward -n ${kubernetes_namespace.database.metadata[0].name} service/postgres-service 5432:5432"
    
    get_backend_logs = "kubectl logs -n ${kubernetes_namespace.app.metadata[0].name} -l app=backend -f"
    
    restart_backend = "kubectl rollout restart deployment/backend -n ${kubernetes_namespace.app.metadata[0].name}"
  }
}